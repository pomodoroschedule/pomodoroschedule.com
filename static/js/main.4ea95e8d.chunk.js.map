{"version":3,"sources":["CircleTimer.js","Clock.js","Schedule.js","App.js","serviceWorker.js","index.js"],"names":["CircleTimer","props","state","duration","completedCallback","running","timeLeft","timerInterval","minutes","Math","floor","this","seconds","clearInterval","setState","setInterval","doComplete","doBegin","document","getElementsByClassName","classList","add","getElementById","innerHTML","formattedTime","setCircleDasharray","setFullCircleDasharrray","timerRemainingPath","style","removeProperty","remove","startTimer","setCircleDasharrayNoAnimation","rawTimeFraction","circleDasharray","toFixed","setAttribute","calculateTimeFraction","className","viewBox","xmlns","cx","cy","r","id","strokeDasharray","d","Component","Clock","timerRef","React","createRef","startedCallback","pauseCallback","poms","currentPom","timerKey","handleStartButtonClick","bind","clockCompletedCallback","event","current","preventDefault","key","ref","onClick","buttonText","Schedule","updatePoms","handleDurationChange","handleAddPom","i","length","pom","createElement","innerText","appendChild","target","value","push","displayPoms","currentPomSpan","type","name","onChange","App","scheduleKey","clockKey","timerStartedCallback","timerPausedCallback","timerCompletedCallback","timeRemaining","console","log","pausedCallback","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4ea95e8d.chunk.js","sourcesContent":["// https://css-tricks.com/how-to-create-an-animated-countdown-timer-with-html-css-and-javascript/\r\n\r\nimport React, { Component } from 'react'\r\n\r\n\r\nconst FULL_DASH_ARRAY = 283\r\n\r\n\r\nclass CircleTimer extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      duration: this.props.duration,\r\n      completedCallback: this.props.completedCallback,\r\n      running: this.props.running,\r\n      timeLeft: this.props.timeLeft,\r\n      timerInterval: null\r\n    }\r\n  }\r\n\r\n  formattedTime() {\r\n      const minutes = Math.floor(this.state.timeLeft / 60)\r\n      let seconds = this.state.timeLeft % 60\r\n  \r\n      if (seconds < 10) {\r\n        seconds = '0' + seconds\r\n      }\r\n    \r\n      return minutes + ':' + seconds\r\n  }\r\n\r\n  startTimer() {\r\n    if (this.state.timerInterval != null) {\r\n      clearInterval(this.state.timerInterval)\r\n    }\r\n\r\n    if (this.state.timeLeft === -1)\r\n      this.setState({timeLeft: this.state.duration})\r\n\r\n    let timerInterval = setInterval(() => {\r\n      if (this.state.running) {\r\n        if (this.state.timeLeft <= 0)\r\n          this.doComplete()\r\n        else {\r\n          if (this.state.timeLeft >= this.state.duration) {\r\n            this.doBegin()\r\n          }\r\n          else {\r\n            let timerRemainingPath = document.getElementsByClassName('base-timer__path-remaining')[0]\r\n            timerRemainingPath.classList.add('transition')\r\n            document.getElementById('base-timer-label').innerHTML = this.formattedTime()\r\n            this.setCircleDasharray()\r\n            this.setState({timeLeft: this.state.timeLeft - 1})\r\n          }\r\n        }\r\n      }\r\n    }, 1000)\r\n    \r\n    this.setState({timerInterval: timerInterval})\r\n  }\r\n      \r\n  doBegin() {\r\n    this.setFullCircleDasharrray()\r\n    this.setState({timeLeft: this.state.timeLeft - 1})\r\n  }\r\n      \r\n  doComplete() {\r\n    if (this.state.timerInterval != null) {\r\n      clearInterval(this.state.timerInterval)\r\n    }\r\n    \r\n    let timerRemainingPath = document.getElementsByClassName('base-timer__path-remaining')[0]\r\n    timerRemainingPath.style.removeProperty('stroke')\r\n    timerRemainingPath.classList.remove('transition')\r\n\r\n    this.setState({timeLeft: 0})\r\n    this.startTimer()\r\n\r\n    this.state.completedCallback()\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.state.timerInterval != null) {\r\n      clearInterval(this.state.timerInterval)\r\n    }\r\n    \r\n    if (this.state.running) {\r\n      if (this.state.timeLeft > 0)\r\n        this.setCircleDasharrayNoAnimation()\r\n      \r\n      this.startTimer()\r\n    } else {\r\n      this.setCircleDasharray()\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.state.timerInterval != null) {\r\n      clearInterval(this.state.timerInterval)\r\n    }\r\n  }\r\n\r\n  calculateTimeFraction() {\r\n    const rawTimeFraction = this.state.timeLeft / this.state.duration\r\n    return rawTimeFraction - ((1 - rawTimeFraction) / (this.state.duration - 1))\r\n  }\r\n\r\n  setFullCircleDasharrray() {\r\n    const circleDasharray = `${(\r\n      FULL_DASH_ARRAY\r\n    ).toFixed(0)} 283`\r\n\r\n    document.getElementById(\"base-timer-path-remaining\").setAttribute(\"stroke-dasharray\", circleDasharray)\r\n  }\r\n\r\n  setCircleDasharrayNoAnimation() {\r\n    let timerRemainingPath = document.getElementsByClassName('base-timer__path-remaining')[0]\r\n    timerRemainingPath.style.removeProperty('stroke')\r\n    timerRemainingPath.classList.remove('transition')\r\n\r\n    this.setCircleDasharray()\r\n  }\r\n\r\n  setCircleDasharray() {\r\n    const circleDasharray = `${(\r\n      this.calculateTimeFraction() * FULL_DASH_ARRAY\r\n    ).toFixed(0)} 283`\r\n\r\n    document.getElementById(\"base-timer-path-remaining\").setAttribute(\"stroke-dasharray\", circleDasharray)\r\n  }\r\n\r\n  render() {\r\n      return (\r\n          <div className=\"base-timer\">\r\n              <svg className=\"base-timer__svg\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                  <g className=\"base-timer__circle\">\r\n                  <circle className=\"base-timer__path-elapsed\" cx=\"50\" cy=\"50\" r=\"45\" />\r\n                  <path\r\n                      id=\"base-timer-path-remaining\"\r\n                      strokeDasharray=\"283\"\r\n                      className={'base-timer__path-remaining'}\r\n                      d=\"\r\n                      M 50, 50\r\n                      m -45, 0\r\n                      a 45,45 0 1,0 90,0\r\n                      a 45,45 0 1,0 -90,0\r\n                      \"\r\n                  ></path>\r\n                  </g>\r\n              </svg>\r\n              <div id=\"base-timer-label\" className=\"base-timer__label\">\r\n                  {this.formattedTime()}\r\n              </div>\r\n          </div>\r\n      )\r\n  }\r\n}\r\n\r\nexport default CircleTimer\r\n","import React, { Component } from 'react'\r\nimport CircleTimer from './CircleTimer'\r\nimport './CircleTimer.css'\r\nimport './Clock.css'\r\n\r\nclass Clock extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.timerRef = React.createRef()\r\n\r\n        this.state = {\r\n            startedCallback: this.props.startedCallback,\r\n            pauseCallback: this.props.pauseCallback,\r\n            completedCallback: this.props.completedCallback,\r\n            poms: this.props.poms,\r\n            currentPom: this.props.currentPom,\r\n            running: this.props.running,\r\n            timeLeft: -1,\r\n            timerKey: 0\r\n        }\r\n\r\n        this.handleStartButtonClick = this.handleStartButtonClick.bind(this)     \r\n        this.clockCompletedCallback = this.clockCompletedCallback.bind(this)     \r\n    }\r\n    \r\n    handleStartButtonClick(event) {\r\n        this.setState({timerKey: this.state.timerKey + 1})\r\n\r\n        if (this.state.running) {\r\n            this.setState({running: false})\r\n            this.setState({timeLeft: this.timerRef.current.state.timeLeft})\r\n            this.setState({timerKey: this.state.timerKey + 1})\r\n        } else { \r\n            this.setState({running: true})\r\n            this.state.startedCallback()\r\n        }\r\n        \r\n        event.preventDefault()\r\n    }\r\n\r\n    buttonText() {\r\n        if (this.state.running)\r\n            return \"Pause\"\r\n        else\r\n            return \"Start\"\r\n    }\r\n    \r\n    clockCompletedCallback() {\r\n        this.setState({currentPom: this.state.currentPom + 1})\r\n        this.setState({timerKey: this.state.timerKey + 1})\r\n        \r\n        this.state.completedCallback()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <CircleTimer\r\n                    key={this.state.timerKey}\r\n                    running={this.state.running}\r\n                    duration={this.state.poms[this.state.currentPom]}\r\n                    timeLeft={this.state.timeLeft}\r\n                    completedCallback={this.clockCompletedCallback}\r\n                    ref={this.timerRef}\r\n                />\r\n                \r\n                <div id=\"duration-controls\">\r\n                    <button id=\"start-btn\" onClick={this.handleStartButtonClick}>{this.buttonText()}</button>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Clock","import React, { Component } from 'react'\r\nimport './Schedule.css'\r\n\r\nclass Schedule extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state  = {\r\n            poms: this.props.poms,\r\n            currentPom: this.props.currentPom,\r\n            updatePoms: this.props.updatePoms,\r\n            duration: 1500\r\n        }\r\n\r\n        this.handleDurationChange = this.handleDurationChange.bind(this)\r\n        this.handleAddPom = this.handleAddPom.bind(this)\r\n    }\r\n\r\n    displayPoms() {\r\n        let poms = document.getElementById('poms')\r\n        poms.innerHTML = ''\r\n\r\n        for (var i = 0; i < this.state.poms.length; i++) {\r\n            let pom = document.createElement('span')\r\n\r\n            pom.classList.add('pom', 'new')\r\n\r\n            if (i === this.state.currentPom) {\r\n                pom.classList.add('pom', 'current')\r\n            }\r\n\r\n            pom.innerText = this.state.poms[i]\r\n\r\n            poms.appendChild(pom)\r\n        }\r\n    }\r\n\r\n    handleDurationChange(event) {\r\n        this.setState({duration: event.target.value})\r\n    }\r\n\r\n    handleAddPom() {\r\n        let poms = this.state.poms\r\n        poms.push(this.state.duration)\r\n        this.setState({poms: poms})\r\n\r\n        this.props.updatePoms(this.state.poms)\r\n        \r\n        this.displayPoms()\r\n    }\r\n\r\n    handleStart() {\r\n        let currentPom = this.props.currentPom\r\n        let currentPomSpan = document.getElementsByClassName('pom')[currentPom]\r\n\r\n        currentPomSpan.classList.remove('new')\r\n        currentPomSpan.classList.add('in-progress')\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.displayPoms()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div id=\"schedule-container\">\r\n                    <label>\r\n                        Duration:\r\n                        <input type=\"text\" name=\"short\" value={this.state.duration} onChange={this.handleDurationChange}/>\r\n                    </label>\r\n                    <button onClick={this.handleAddPom}>+</button>\r\n                    <span id=\"poms\"></span>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Schedule","import React, { Component } from 'react'\r\nimport Clock from './Clock'\r\nimport Schedule from './Schedule'\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      poms: [],\r\n      currentPom: -1,\r\n      running: false,\r\n      scheduleKey: 0,\r\n      clockKey: 0\r\n    }\r\n\r\n    this.updatePoms = this.updatePoms.bind(this)\r\n    this.timerStartedCallback = this.timerStartedCallback.bind(this)\r\n    this.timerPausedCallback = this.timerPausedCallback.bind(this)\r\n    this.timerCompletedCallback = this.timerCompletedCallback.bind(this)\r\n  }\r\n\r\n  updatePoms(poms) {\r\n    this.setState({poms: poms})\r\n  }\r\n\r\n  timerStartedCallback() {\r\n    if (this.state.currentPom < 0) {\r\n      this.setState({currentPom: this.state.currentPom + 1})\r\n      this.setState({running: true})\r\n      this.setState({scheduleKey: this.state.scheduleKey + 1})\r\n      this.setState({clockKey: this.state.clockKey + 1})\r\n    }\r\n  }\r\n\r\n  timerPausedCallback(timeRemaining) {\r\n    console.log(timeRemaining) \r\n  }\r\n\r\n  timerCompletedCallback() {\r\n    this.setState({currentPom: this.state.currentPom + 1})\r\n    this.setState({scheduleKey: this.state.scheduleKey + 1})\r\n    this.setState({clockKey: this.state.clockKey + 1})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"container\">\r\n        <div id=\"schedule\">\r\n          <Schedule \r\n            key={this.state.scheduleKey} \r\n            poms={this.state.poms} \r\n            currentPom={this.state.currentPom} \r\n            updatePoms={this.updatePoms}\r\n          />\r\n        </div>\r\n        <div id=\"clock\">\r\n          <Clock \r\n            key={this.state.clockKey}\r\n            poms={this.state.poms}\r\n            currentPom={this.state.currentPom}\r\n            running={this.state.running}\r\n            startedCallback={this.timerStartedCallback}\r\n            pausedCallback={this.timerPausedCallback}\r\n            completedCallback={this.timerCompletedCallback}\r\n          />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}