{"version":3,"sources":["CircleTimer.js","Clock.js","App.js","serviceWorker.js","index.js"],"names":["CircleTimer","state","duration","longSeconds","props","shortSeconds","timePassed","timeLeft","timerInterval","longPhase","minutes","Math","floor","this","seconds","clearInterval","setState","setInterval","doComplete","doBegin","document","getElementsByClassName","classList","add","getElementById","innerHTML","formattedTime","setCircleDasharray","setFullCircleDasharrray","timerRemainingPath","style","removeProperty","remove","startTimer","rawTimeFraction","circleDasharray","toFixed","setAttribute","calculateTimeFraction","className","viewBox","xmlns","cx","cy","r","id","strokeDasharray","d","Component","Clock","renderClockKey","update","handleLongChange","bind","handleShortChange","handleDurationButtonClick","event","target","value","preventDefault","key","type","name","onChange","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0edaa306.chunk.js","sourcesContent":["// https://css-tricks.com/how-to-create-an-animated-countdown-timer-with-html-css-and-javascript/\r\n\r\nimport React, { Component } from 'react'\r\n\r\n\r\nconst FULL_DASH_ARRAY = 283\r\n\r\n\r\nclass CircleTimer extends Component {\r\n    state = {\r\n      duration: 0,\r\n      longSeconds: this.props.longSeconds,\r\n      shortSeconds: this.props.shortSeconds,\r\n      timePassed: 0,\r\n      timeLeft: 0,\r\n      timerInterval: null,\r\n      longPhase: true\r\n    }\r\n\r\n    formattedTime() {\r\n        const minutes = Math.floor(this.state.timeLeft / 60)\r\n        let seconds = this.state.timeLeft % 60\r\n    \r\n        if (seconds < 10) {\r\n          seconds = '0' + seconds\r\n        }\r\n      \r\n        return minutes + ':' + seconds\r\n    }\r\n\r\n    startTimer() {\r\n      if (this.state.timerInterval != null) {\r\n        clearInterval(this.state.timerInterval)\r\n      }\r\n\r\n      if (this.state.longPhase)\r\n        this.setState({duration: this.props.longSeconds})\r\n      else\r\n        this.setState({duration: this.props.shortSeconds})\r\n\r\n      let timerInterval = setInterval(() => {\r\n        this.setState({timeLeft: this.state.duration - this.state.timePassed})\r\n        \r\n        if (this.state.timeLeft <= 0)\r\n          this.doComplete()\r\n        else {\r\n          if (this.state.timeLeft >= this.state.duration) {\r\n            this.doBegin()\r\n          }\r\n          else {\r\n            let timerRemainingPath = document.getElementsByClassName('base-timer__path-remaining')[0]\r\n            timerRemainingPath.classList.add('transition')\r\n            document.getElementById('base-timer-label').innerHTML = this.formattedTime()\r\n            this.setCircleDasharray()\r\n            this.setState({timePassed: this.state.timePassed + 1})\r\n          }\r\n        }\r\n      }, 1000)\r\n      \r\n      this.setState({timerInterval: timerInterval})\r\n    }\r\n        \r\n    doBegin() {\r\n      this.setFullCircleDasharrray()\r\n      this.setState({timePassed: this.state.timePassed + 1})\r\n    }\r\n        \r\n    doComplete() {\r\n      if (this.state.timerInterval != null) {\r\n        clearInterval(this.state.timerInterval)\r\n      }\r\n      \r\n      let timerRemainingPath = document.getElementsByClassName('base-timer__path-remaining')[0]\r\n      timerRemainingPath.style.removeProperty('stroke')\r\n      timerRemainingPath.classList.remove('transition')\r\n\r\n      this.setState({longPhase: !this.state.longPhase})\r\n      this.setState({timePassed: 0})\r\n      this.setState({timeLeft: 0})\r\n      this.startTimer()\r\n    }\r\n\r\n    componentDidMount() {\r\n      if (this.state.timerInterval != null) {\r\n        clearInterval(this.state.timerInterval)\r\n      }\r\n      \r\n      this.startTimer()\r\n    }\r\n\r\n    componentWillUnmount() {\r\n      if (this.state.timerInterval != null) {\r\n        clearInterval(this.state.timerInterval)\r\n      }\r\n    }\r\n\r\n    calculateTimeFraction() {\r\n      const rawTimeFraction = this.state.timeLeft / this.state.duration\r\n      return rawTimeFraction - ((1 - rawTimeFraction) / (this.state.duration - 1))\r\n    }\r\n\r\n    setFullCircleDasharrray() {\r\n      const circleDasharray = `${(\r\n        FULL_DASH_ARRAY\r\n      ).toFixed(0)} 283`\r\n\r\n      document.getElementById(\"base-timer-path-remaining\").setAttribute(\"stroke-dasharray\", circleDasharray)\r\n    }\r\n\r\n    setCircleDasharray() {\r\n      const circleDasharray = `${(\r\n        this.calculateTimeFraction() * FULL_DASH_ARRAY\r\n      ).toFixed(0)} 283`\r\n\r\n      document.getElementById(\"base-timer-path-remaining\").setAttribute(\"stroke-dasharray\", circleDasharray)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"base-timer\">\r\n                <svg className=\"base-timer__svg\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <g className=\"base-timer__circle\">\r\n                    <circle className=\"base-timer__path-elapsed\" cx=\"50\" cy=\"50\" r=\"45\" />\r\n                    <path\r\n                        id=\"base-timer-path-remaining\"\r\n                        strokeDasharray=\"283\"\r\n                        className={'base-timer__path-remaining'}\r\n                        d=\"\r\n                        M 50, 50\r\n                        m -45, 0\r\n                        a 45,45 0 1,0 90,0\r\n                        a 45,45 0 1,0 -90,0\r\n                        \"\r\n                    ></path>\r\n                    </g>\r\n                </svg>\r\n                <div id=\"base-timer-label\" className=\"base-timer__label\">\r\n                    {this.formattedTime()}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CircleTimer\r\n","import React, { Component } from 'react'\r\nimport CircleTimer from './CircleTimer'\r\nimport './CircleTimer.css'\r\nimport './Clock.css'\r\n\r\nclass Clock extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            longSeconds: 4,\r\n            shortSeconds: 2,\r\n            renderClockKey: 0,\r\n            update: 0\r\n        }\r\n\r\n        this.handleLongChange = this.handleLongChange.bind(this)\r\n        this.handleShortChange = this.handleShortChange.bind(this)\r\n        this.handleDurationButtonClick = this.handleDurationButtonClick.bind(this)     \r\n    }\r\n\r\n    handleLongChange(event) {\r\n        this.setState({longSeconds: event.target.value})\r\n    }\r\n\r\n    handleShortChange(event) {\r\n        this.setState({shortSeconds: event.target.value})\r\n    }\r\n\r\n    handleDurationButtonClick(event) {\r\n        this.setState({update: this.state.update + 1})\r\n        event.preventDefault()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <CircleTimer\r\n                    key={this.state.update}\r\n                    longSeconds={this.state.longSeconds}\r\n                    shortSeconds={this.state.shortSeconds}\r\n                />\r\n                \r\n                <div id=\"duration-controls\">\r\n                    <label>\r\n                        Long:\r\n                        <input type=\"text\" name=\"short\" value={this.state.longSeconds} onChange={this.handleLongChange}/>\r\n                    </label>\r\n                    <label>\r\n                        Short:\r\n                        <input type=\"text\" name=\"short\" value={this.state.shortSeconds} onChange={this.handleShortChange}/>\r\n                    </label>\r\n                    <button id=\"duration-btn\" onClick={this.handleDurationButtonClick}>Update</button>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Clock","import React from 'react';\nimport Clock from './Clock'\n\nfunction App() {  \n  return (\n    <Clock />\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}