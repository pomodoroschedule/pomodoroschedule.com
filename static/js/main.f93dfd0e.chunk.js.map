{"version":3,"sources":["CircleTimer.js","Clock.js","Schedule.js","App.js","serviceWorker.js","index.js"],"names":["CircleTimer","props","state","duration","completedCallback","running","timeLeft","timerInterval","this","minutes","Math","floor","seconds","clearInterval","setState","setInterval","doComplete","doBegin","document","getElementsByClassName","classList","add","getElementById","innerHTML","formattedTime","setCircleDasharray","setFullCircleDasharrray","timerRemainingPath","style","removeProperty","remove","startTimer","setCircleDasharrayNoAnimation","timeLabel","timeRemainingPath","timeElapsedPath","rawTimeFraction","circleDasharray","toFixed","setAttribute","calculateTimeFraction","className","viewBox","xmlns","id","cx","cy","r","strokeDasharray","d","Component","Clock","timerRef","React","createRef","startedCallback","pauseCallback","poms","currentPom","timerKey","handleStartButtonClick","bind","clockCompletedCallback","event","length","current","preventDefault","key","ref","onClick","buttonText","Schedule","updatePoms","longDuration","shortDuration","handleLongDurationChange","handleShortDurationChange","handleAddLongPom","handleAddShortPom","i","pom","createElement","innerText","appendChild","target","value","push","displayPoms","currentPomSpan","class","type","name","onChange","App","ReactGA","initialize","pageview","window","location","pathname","search","scheduleKey","clockKey","timerStartedCallback","timerPausedCallback","timerCompletedCallback","timeRemaining","console","log","pausedCallback","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f93dfd0e.chunk.js","sourcesContent":["// https://css-tricks.com/how-to-create-an-animated-countdown-timer-with-html-css-and-javascript/\r\n\r\nimport React, { Component } from 'react'\r\n\r\n\r\nconst FULL_DASH_ARRAY = 283\r\n\r\n\r\nclass CircleTimer extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      duration: this.props.duration,\r\n      completedCallback: this.props.completedCallback,\r\n      running: this.props.running,\r\n      timeLeft: this.props.timeLeft,\r\n      timerInterval: null\r\n    }\r\n  }\r\n\r\n  formattedTime() {\r\n    if (this.state.timeLeft < 0)\r\n      return \"--:--\"\r\n\r\n    const minutes = Math.floor(this.state.timeLeft / 60)\r\n    let seconds = this.state.timeLeft % 60\r\n\r\n    if (seconds < 10) {\r\n      seconds = '0' + seconds\r\n    }\r\n  \r\n    return minutes + ':' + seconds\r\n  }\r\n\r\n  startTimer() {\r\n    if (this.state.timerInterval != null) {\r\n      clearInterval(this.state.timerInterval)\r\n    }\r\n\r\n    if (this.state.timeLeft === -1)\r\n      this.setState({timeLeft: this.state.duration})\r\n\r\n    let timerInterval = setInterval(() => {\r\n      if (this.state.running) {\r\n        if (this.state.timeLeft <= 0)\r\n          this.doComplete()\r\n        else {\r\n          if (this.state.timeLeft >= this.state.duration) {\r\n            this.doBegin()\r\n          }\r\n          else {\r\n            let timerRemainingPath = document.getElementsByClassName('base-timer__path-remaining')[0]\r\n            timerRemainingPath.classList.add('transition')\r\n            document.getElementById('base-timer-label').innerHTML = this.formattedTime()\r\n            this.setCircleDasharray()\r\n            this.setState({timeLeft: this.state.timeLeft - 1})\r\n          }\r\n        }\r\n      }\r\n    }, 1000)\r\n    \r\n    this.setState({timerInterval: timerInterval})\r\n  }\r\n      \r\n  doBegin() {\r\n    this.setFullCircleDasharrray()\r\n    this.setState({timeLeft: this.state.timeLeft - 1})\r\n  }\r\n      \r\n  doComplete() {\r\n    if (this.state.timerInterval != null) {\r\n      clearInterval(this.state.timerInterval)\r\n    }\r\n    \r\n    let timerRemainingPath = document.getElementsByClassName('base-timer__path-remaining')[0]\r\n    timerRemainingPath.style.removeProperty('stroke')\r\n    timerRemainingPath.classList.remove('transition')\r\n\r\n    this.setState({timeLeft: 0})\r\n    this.startTimer()\r\n\r\n    this.state.completedCallback()\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.state.timerInterval != null) {\r\n      clearInterval(this.state.timerInterval)\r\n    }\r\n    \r\n    if (this.state.running) {\r\n      if (this.state.timeLeft > 0)\r\n        this.setCircleDasharrayNoAnimation()\r\n      \r\n      this.startTimer()\r\n    } else {\r\n      let timeLabel = document.getElementById('base-timer-label')\r\n      let timeRemainingPath = document.getElementById('base-timer-path-remaining')\r\n      let timeElapsedPath = document.getElementById('base-timer-path-elapsed')\r\n\r\n      timeLabel.classList.add('paused')\r\n      timeRemainingPath.classList.add('paused')\r\n      timeElapsedPath.classList.add('paused-background')\r\n\r\n      this.setCircleDasharray()\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.state.timerInterval != null) {\r\n      clearInterval(this.state.timerInterval)\r\n    }\r\n  }\r\n\r\n  calculateTimeFraction() {\r\n    const rawTimeFraction = this.state.timeLeft / this.state.duration\r\n    return rawTimeFraction - ((1 - rawTimeFraction) / (this.state.duration - 1))\r\n  }\r\n\r\n  setFullCircleDasharrray() {\r\n    const circleDasharray = `${(\r\n      FULL_DASH_ARRAY\r\n    ).toFixed(0)} 283`\r\n\r\n    document.getElementById(\"base-timer-path-remaining\").setAttribute(\"stroke-dasharray\", circleDasharray)\r\n  }\r\n\r\n  setCircleDasharrayNoAnimation() {\r\n    let timerRemainingPath = document.getElementsByClassName('base-timer__path-remaining')[0]\r\n    timerRemainingPath.style.removeProperty('stroke')\r\n    timerRemainingPath.classList.remove('transition')\r\n\r\n    this.setCircleDasharray()\r\n  }\r\n\r\n  setCircleDasharray() {\r\n    const circleDasharray = `${(\r\n      this.calculateTimeFraction() * FULL_DASH_ARRAY\r\n    ).toFixed(0)} 283`\r\n\r\n    document.getElementById(\"base-timer-path-remaining\").setAttribute(\"stroke-dasharray\", circleDasharray)\r\n  }\r\n\r\n  render() {\r\n      return (\r\n          <div className=\"base-timer\">\r\n              <svg className=\"base-timer__svg\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                  <g className=\"base-timer__circle\">\r\n                  <circle id=\"base-timer-path-elapsed\" className=\"base-timer__path-elapsed\" cx=\"50\" cy=\"50\" r=\"45\" />\r\n                  <path\r\n                      id=\"base-timer-path-remaining\"\r\n                      strokeDasharray=\"283\"\r\n                      className={'base-timer__path-remaining'}\r\n                      d=\"\r\n                      M 50, 50\r\n                      m -45, 0\r\n                      a 45,45 0 1,0 90,0\r\n                      a 45,45 0 1,0 -90,0\r\n                      \"\r\n                  ></path>\r\n                  </g>\r\n              </svg>\r\n              <div id=\"base-timer-label\" className=\"base-timer__label\">\r\n                  {this.formattedTime()}\r\n              </div>\r\n          </div>\r\n      )\r\n  }\r\n}\r\n\r\nexport default CircleTimer\r\n","import React, { Component } from 'react'\r\nimport CircleTimer from './CircleTimer'\r\nimport './CircleTimer.css'\r\nimport './Clock.css'\r\n\r\nclass Clock extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.timerRef = React.createRef()\r\n\r\n        this.state = {\r\n            startedCallback: this.props.startedCallback,\r\n            pauseCallback: this.props.pauseCallback,\r\n            completedCallback: this.props.completedCallback,\r\n            poms: this.props.poms,\r\n            currentPom: this.props.currentPom,\r\n            running: this.props.running,\r\n            timeLeft: -1,\r\n            timerKey: 0\r\n        }\r\n\r\n        this.handleStartButtonClick = this.handleStartButtonClick.bind(this)     \r\n        this.clockCompletedCallback = this.clockCompletedCallback.bind(this)     \r\n    }\r\n    \r\n    handleStartButtonClick(event) {\r\n        if (this.state.poms.length > 0) {\r\n            if (this.state.running) {\r\n                this.setState({running: false})\r\n                this.setState({timeLeft: this.timerRef.current.state.timeLeft})\r\n            } else { \r\n                this.setState({running: true})\r\n                this.state.startedCallback()\r\n            }\r\n            \r\n            this.setState({timerKey: this.state.timerKey + 1})\r\n        }\r\n        \r\n        event.preventDefault()\r\n    }\r\n\r\n    buttonText() {\r\n        if (this.state.running)\r\n            return \"Pause\"\r\n        else\r\n            return \"Start\"\r\n    }\r\n    \r\n    clockCompletedCallback() {\r\n        this.setState({currentPom: this.state.currentPom + 1})\r\n        this.setState({timerKey: this.state.timerKey + 1})\r\n        \r\n        this.state.completedCallback()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <CircleTimer\r\n                    key={this.state.timerKey}\r\n                    running={this.state.running}\r\n                    duration={this.state.poms[this.state.currentPom]}\r\n                    timeLeft={this.state.timeLeft}\r\n                    completedCallback={this.clockCompletedCallback}\r\n                    ref={this.timerRef}\r\n                />\r\n                \r\n                <div id=\"duration-controls\">\r\n                    <button id=\"start-btn\" onClick={this.handleStartButtonClick}>{this.buttonText()}</button>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Clock","import React, { Component } from 'react'\r\nimport './Schedule.css'\r\n\r\nclass Schedule extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state  = {\r\n            poms: this.props.poms,\r\n            currentPom: this.props.currentPom,\r\n            updatePoms: this.props.updatePoms,\r\n            longDuration: 1500,\r\n            shortDuration: 300\r\n        }\r\n\r\n        this.handleLongDurationChange = this.handleLongDurationChange.bind(this)\r\n        this.handleShortDurationChange = this.handleShortDurationChange.bind(this)\r\n        this.handleAddLongPom = this.handleAddLongPom.bind(this)\r\n        this.handleAddShortPom = this.handleAddShortPom.bind(this)\r\n        this.updatePoms = this.updatePoms.bind(this)\r\n    }\r\n\r\n    displayPoms() {\r\n        let poms = document.getElementById('poms')\r\n        poms.innerHTML = ''\r\n\r\n        for (var i = 0; i < this.state.poms.length; i++) {\r\n            let pom = document.createElement('span')\r\n\r\n            pom.classList.add('pom', 'new')\r\n\r\n            if (i === this.state.currentPom) {\r\n                pom.classList.add('pom', 'current')\r\n            }\r\n\r\n            pom.innerText = this.state.poms[i]\r\n\r\n            poms.appendChild(pom)\r\n        }\r\n    }\r\n\r\n    handleLongDurationChange(event) {\r\n        this.setState({longDuration: event.target.value})\r\n    }\r\n\r\n    handleShortDurationChange(event) {\r\n        this.setState({shortDuration: event.target.value})\r\n    }\r\n\r\n    handleAddLongPom() {\r\n        let poms = this.state.poms\r\n        poms.push(this.state.longDuration)\r\n        this.setState({poms: poms})\r\n        \r\n        this.updatePoms()\r\n    }\r\n    \r\n    handleAddShortPom() {\r\n        let poms = this.state.poms\r\n        poms.push(this.state.shortDuration)\r\n        this.setState({poms: poms})\r\n        \r\n        this.updatePoms()\r\n    }\r\n\r\n    updatePoms() {\r\n        this.props.updatePoms(this.state.poms)\r\n        \r\n        this.displayPoms()\r\n    }\r\n\r\n    handleStart() {\r\n        let currentPom = this.props.currentPom\r\n        let currentPomSpan = document.getElementsByClassName('pom')[currentPom]\r\n\r\n        currentPomSpan.classList.remove('new')\r\n        currentPomSpan.classList.add('in-progress')\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.displayPoms()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div id=\"schedule-container\">\r\n                    <div class=\"input\">\r\n                        <span class=\"label\">Long</span>\r\n                        <input type=\"text\" name=\"long\" value={this.state.longDuration} onChange={this.handleLongDurationChange}/>\r\n                        <button onClick={this.handleAddLongPom}>+</button>\r\n\r\n                        <span class=\"label\">Short</span>\r\n                        <input type=\"text\" name=\"short\" value={this.state.shortDuration} onChange={this.handleShortDurationChange}/>\r\n                        <button onClick={this.handleAddShortPom}>+</button>\r\n                    </div>\r\n                    <div class=\"display\">\r\n                        <span id=\"poms\"></span>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Schedule","import React, { Component } from 'react'\r\nimport Clock from './Clock'\r\nimport Schedule from './Schedule'\r\nimport ReactGA from 'react-ga'\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    ReactGA.initialize('UA-168751680-1')\r\n    ReactGA.pageview(window.location.pathname + window.location.search)\r\n\r\n    this.state = {\r\n      poms: [],\r\n      currentPom: -1,\r\n      running: false,\r\n      scheduleKey: 0,\r\n      clockKey: 0\r\n    }\r\n\r\n    this.updatePoms = this.updatePoms.bind(this)\r\n    this.timerStartedCallback = this.timerStartedCallback.bind(this)\r\n    this.timerPausedCallback = this.timerPausedCallback.bind(this)\r\n    this.timerCompletedCallback = this.timerCompletedCallback.bind(this)\r\n  }\r\n\r\n  updatePoms(poms) {\r\n    this.setState({poms: poms})\r\n  }\r\n\r\n  timerStartedCallback() {\r\n    if (this.state.currentPom < 0) {\r\n      this.setState({currentPom: this.state.currentPom + 1})\r\n      this.setState({running: true})\r\n      this.setState({scheduleKey: this.state.scheduleKey + 1})\r\n      this.setState({clockKey: this.state.clockKey + 1})\r\n    }\r\n  }\r\n\r\n  timerPausedCallback(timeRemaining) {\r\n    console.log(timeRemaining) \r\n  }\r\n\r\n  timerCompletedCallback() {\r\n    this.setState({currentPom: this.state.currentPom + 1})\r\n    this.setState({scheduleKey: this.state.scheduleKey + 1})\r\n    this.setState({clockKey: this.state.clockKey + 1})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"container\">\r\n        <div id=\"schedule\">\r\n          <Schedule \r\n            key={this.state.scheduleKey} \r\n            poms={this.state.poms} \r\n            currentPom={this.state.currentPom} \r\n            updatePoms={this.updatePoms}\r\n          />\r\n        </div>\r\n        <div id=\"clock\">\r\n          <Clock \r\n            key={this.state.clockKey}\r\n            poms={this.state.poms}\r\n            currentPom={this.state.currentPom}\r\n            running={this.state.running}\r\n            startedCallback={this.timerStartedCallback}\r\n            pausedCallback={this.timerPausedCallback}\r\n            completedCallback={this.timerCompletedCallback}\r\n          />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}