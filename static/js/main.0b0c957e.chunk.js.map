{"version":3,"sources":["images/play.svg","images/pause.svg","DialControls.js","Dial.js","Clock.js","Schedule.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DialControls","props","state","startCallback","running","playButtonIcon","play","handleStartClick","bind","event","preventDefault","this","setState","pause","setPlayButtonIcon","id","src","alt","onClick","Component","Dial","poms","currentPom","startedCallback","completedCallback","started","timeLeft","timerInterval","dialControlsKey","startTimer","minutes","Math","floor","seconds","setInterval","duration","doComplete","doBegin","document","getElementsByClassName","classList","add","getElementById","innerHTML","formattedTime","setCircleDasharray","setFullCircleDasharrray","clearInterval","timerRemainingPath","style","removeProperty","remove","elapsedPath","blinkInterval","setCircleDasharrayNoAnimation","timeLabel","timeRemainingPath","timeElapsedPath","rawTimeFraction","circleDasharray","toFixed","setAttribute","calculateTimeFraction","className","viewBox","xmlns","cx","cy","r","strokeDasharray","d","key","Clock","dialRef","React","createRef","pauseCallback","dialKey","handleStartButtonClick","clockCompletedCallback","length","timerRef","current","timerKey","ref","Schedule","updatePoms","longDuration","shortDuration","handleLongDurationChange","handleShortDurationChange","handleAddLongPom","handleAddShortPom","i","pom","createElement","innerText","appendChild","target","value","push","displayPoms","currentPomSpan","type","name","onChange","App","ReactGA","initialize","pageview","window","location","pathname","search","scheduleKey","clockKey","timerStartedCallback","timerPausedCallback","timerCompletedCallback","timeRemaining","console","log","pausedCallback","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0b0c957e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/play.320205fd.svg\";","module.exports = __webpack_public_path__ + \"static/media/pause.30443a20.svg\";","import React, { Component } from 'react'\r\nimport play from './images/play.svg'\r\nimport pause from './images/pause.svg'\r\nimport './DialControls.css'\r\n\r\nclass DialControls extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            startCallback: this.props.startCallback,\r\n            running: this.props.running,\r\n            playButtonIcon: play\r\n        }\r\n\r\n        this.handleStartClick = this.handleStartClick.bind(this)\r\n    }\r\n\r\n    handleStartClick(event) {\r\n        event.preventDefault()\r\n        \r\n        this.state.startCallback()\r\n    }\r\n\r\n    setPlayButtonIcon() {\r\n        // let buttonLabel = document.getElementById('btn-label')\r\n\r\n        if (this.state.running) {\r\n            this.setState({playButtonIcon: pause})\r\n        } else {\r\n            this.setState({playButtonIcon: play})\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setPlayButtonIcon()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div>\r\n            <img id='play-btn' src={this.state.playButtonIcon} alt='play' onClick={this.handleStartClick}/>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DialControls","// https://css-tricks.com/how-to-create-an-animated-countdown-timer-with-html-css-and-javascript/\r\n\r\nimport React, { Component } from 'react'\r\nimport DialControls from './DialControls'\r\nimport './Dial.css'\r\n\r\nconst FULL_DASH_ARRAY = 283\r\n\r\n\r\nclass Dial extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      poms: this.props.poms,\r\n      currentPom: this.props.currentPom,\r\n      startedCallback: this.props.startedCallback,\r\n      completedCallback: this.props.completedCallback,\r\n      started: false,\r\n      running: this.props.running,\r\n      timeLeft: this.props.timeLeft,\r\n      timerInterval: null,\r\n      dialControlsKey: 0\r\n    }\r\n\r\n    this.startTimer = this.startTimer.bind(this)\r\n  }\r\n\r\n  formattedTime() {\r\n    if (this.state.timeLeft < 0)\r\n      return \"--:--\"\r\n\r\n    const minutes = Math.floor(this.state.timeLeft / 60)\r\n    let seconds = this.state.timeLeft % 60\r\n\r\n    if (seconds < 10) {\r\n      seconds = '0' + seconds\r\n    }\r\n  \r\n    return minutes + ':' + seconds\r\n  }\r\n\r\n  startTimer() { \r\n    let currentPom = this.state.currentPom\r\n\r\n    if (this.state.currentPom < 0) {\r\n      currentPom++\r\n      this.setState({currentPom: currentPom})\r\n    }\r\n\r\n    if (this.state.timerInterval === null) {    \r\n      this.state.startedCallback()\r\n      this.setState({running: true})\r\n\r\n      let timerInterval = setInterval(() => {\r\n        let duration = this.state.poms[currentPom]\r\n        let timeLeft = this.state.timeLeft\r\n      \r\n        if (timeLeft === -1) {\r\n          timeLeft = duration\r\n          this.setState({timeLeft: timeLeft})\r\n        }\r\n\r\n      this.setState({duration: duration})\r\n        if (this.state.running) {\r\n          \r\n          if (timeLeft <= 0) {\r\n            this.doComplete()\r\n          } else {\r\n            if (timeLeft >= duration) {\r\n              this.doBegin()\r\n            }\r\n            else {\r\n              let timerRemainingPath = document.getElementsByClassName('base-timer__path-remaining')[0]\r\n              timerRemainingPath.classList.add('transition')\r\n              document.getElementById('timer-label').innerHTML = this.formattedTime()\r\n              this.setCircleDasharray()\r\n              this.setState({timeLeft: this.state.timeLeft - 1})\r\n            }\r\n          }\r\n        }\r\n      }, 1000)\r\n      \r\n      this.setState({timerInterval: timerInterval})\r\n    } else {\r\n      this.setState({running: !this.state.running})\r\n      this.setState({dialControlsKey: this.state.dialControlsKey + 1})\r\n    }\r\n  }\r\n      \r\n  doBegin() {\r\n    this.state.startedCallback()\r\n    this.setFullCircleDasharrray()\r\n    this.setState({timeLeft: this.state.timeLeft - 1})\r\n  }\r\n      \r\n  doComplete() {\r\n    if (this.state.timerInterval != null) {\r\n      clearInterval(this.state.timerInterval)\r\n    }\r\n    \r\n    let timerRemainingPath = document.getElementsByClassName('base-timer__path-remaining')[0]\r\n    timerRemainingPath.style.removeProperty('stroke')\r\n    timerRemainingPath.classList.remove('transition')\r\n\r\n    let elapsedPath = document.getElementById('base-timer-path-elapsed')\r\n    elapsedPath.classList.add('completed-blink')\r\n\r\n    let blinkInterval = setInterval(() => {\r\n      elapsedPath.classList.remove('completed-blink')\r\n      this.setState({timeLeft: 0})\r\n      this.startTimer()\r\n\r\n      clearInterval(blinkInterval)\r\n\r\n      this.state.completedCallback()\r\n    }, 5000)\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.state.timerInterval != null) {\r\n      clearInterval(this.state.timerInterval)\r\n    }\r\n    \r\n    if (this.state.running) {\r\n      if (this.state.timeLeft > 0)\r\n        this.setCircleDasharrayNoAnimation()\r\n      \r\n      this.startTimer()\r\n    } else {\r\n      let timeLabel = document.getElementById('timer-label')\r\n      let timeRemainingPath = document.getElementById('base-timer-path-remaining')\r\n      let timeElapsedPath = document.getElementById('base-timer-path-elapsed')\r\n\r\n      timeLabel.classList.add('paused')\r\n      timeRemainingPath.classList.add('paused')\r\n      timeElapsedPath.classList.add('paused-background')\r\n\r\n      this.setCircleDasharray()\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.state.timerInterval != null) {\r\n      clearInterval(this.state.timerInterval)\r\n    }\r\n  }\r\n\r\n  calculateTimeFraction() {\r\n    const rawTimeFraction = this.state.timeLeft / this.state.duration\r\n    return rawTimeFraction - ((1 - rawTimeFraction) / (this.state.duration - 1))\r\n  }\r\n\r\n  setFullCircleDasharrray() {\r\n    const circleDasharray = `${(\r\n      FULL_DASH_ARRAY\r\n    ).toFixed(0)} 283`\r\n\r\n    document.getElementById(\"base-timer-path-remaining\").setAttribute(\"stroke-dasharray\", circleDasharray)\r\n  }\r\n\r\n  setCircleDasharrayNoAnimation() {\r\n    let timerRemainingPath = document.getElementsByClassName('base-timer__path-remaining')[0]\r\n    timerRemainingPath.style.removeProperty('stroke')\r\n    timerRemainingPath.classList.remove('transition')\r\n\r\n    this.setCircleDasharray()\r\n  }\r\n\r\n  setCircleDasharray() {\r\n    const circleDasharray = `${(\r\n      this.calculateTimeFraction() * FULL_DASH_ARRAY\r\n    ).toFixed(0)} 283`\r\n\r\n    document.getElementById(\"base-timer-path-remaining\").setAttribute(\"stroke-dasharray\", circleDasharray)\r\n  }\r\n\r\n  render() {\r\n      return (\r\n          <div className=\"base-timer\">\r\n              <svg className=\"base-timer__svg\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                  <g className=\"base-timer__circle\">\r\n                  <circle id=\"base-timer-path-elapsed\" className=\"base-timer__path-elapsed\" cx=\"50\" cy=\"50\" r=\"45\" />\r\n                  <path\r\n                      id=\"base-timer-path-remaining\"\r\n                      strokeDasharray=\"283\"\r\n                      className={'base-timer__path-remaining'}\r\n                      d=\"\r\n                      M 50, 50\r\n                      m -45, 0\r\n                      a 45,45 0 1,0 90,0\r\n                      a 45,45 0 1,0 -90,0\r\n                      \"\r\n                  ></path>\r\n                  </g>\r\n              </svg>\r\n              <div id=\"timer-label\" className=\"base-timer__label\">\r\n                  {this.formattedTime()}\r\n              </div>\r\n              <div id=\"timer-controls\" className=\"base-timer__label\">\r\n                  <DialControls\r\n                    key={this.state.dialControlsKey}\r\n                    startCallback={this.startTimer}\r\n                    running={this.state.running}\r\n                  ></DialControls>\r\n              </div>\r\n          </div>\r\n      )\r\n  }\r\n}\r\n\r\nexport default Dial \r\n","import React, { Component } from 'react'\r\nimport Dial from './Dial'\r\nimport './Clock.css'\r\n\r\nclass Clock extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.dialRef = React.createRef()\r\n\r\n        this.state = {\r\n            startedCallback: this.props.startedCallback,\r\n            pauseCallback: this.props.pauseCallback,\r\n            completedCallback: this.props.completedCallback,\r\n            poms: this.props.poms,\r\n            currentPom: this.props.currentPom,\r\n            running: this.props.running,\r\n            timeLeft: -1,\r\n            dialKey: 0\r\n        }\r\n\r\n        this.handleStartButtonClick = this.handleStartButtonClick.bind(this)     \r\n        this.clockCompletedCallback = this.clockCompletedCallback.bind(this)     \r\n    }\r\n    \r\n    handleStartButtonClick(event) {\r\n        if (this.state.poms.length > 0) {\r\n            if (this.state.running) {\r\n                this.setState({running: false})\r\n                this.setState({timeLeft: this.timerRef.current.state.timeLeft})\r\n            } else { \r\n                this.setState({running: true})\r\n                this.state.startedCallback()\r\n            }\r\n            \r\n            this.setState({dialKey: this.state.dialKey + 1})\r\n        }\r\n        \r\n        event.preventDefault()\r\n    }\r\n\r\n    clockCompletedCallback() {\r\n        this.setState({currentPom: this.state.currentPom + 1})\r\n        this.setState({timerKey: this.state.timerKey + 1})\r\n        \r\n        this.state.completedCallback()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Dial\r\n                    key={this.state.dialKey}\r\n                    running={this.state.running}\r\n                    poms={this.state.poms}\r\n                    currentPom={this.state.currentPom}\r\n                    timeLeft={this.state.timeLeft}\r\n                    startedCallback={this.state.startedCallback}\r\n                    completedCallback={this.clockCompletedCallback}\r\n                    ref={this.dialRef}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Clock","import React, { Component } from 'react'\r\nimport './Schedule.css'\r\n\r\nclass Schedule extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state  = {\r\n            poms: this.props.poms,\r\n            currentPom: this.props.currentPom,\r\n            updatePoms: this.props.updatePoms,\r\n            longDuration: 1500,\r\n            shortDuration: 300\r\n        }\r\n\r\n        this.handleLongDurationChange = this.handleLongDurationChange.bind(this)\r\n        this.handleShortDurationChange = this.handleShortDurationChange.bind(this)\r\n        this.handleAddLongPom = this.handleAddLongPom.bind(this)\r\n        this.handleAddShortPom = this.handleAddShortPom.bind(this)\r\n        this.updatePoms = this.updatePoms.bind(this)\r\n    }\r\n\r\n    displayPoms() {\r\n        let poms = document.getElementById('poms')\r\n        poms.innerHTML = ''\r\n\r\n        for (var i = 0; i < this.state.poms.length; i++) {\r\n            let pom = document.createElement('span')\r\n\r\n            pom.classList.add('pom', 'new')\r\n\r\n            if (i === this.state.currentPom) {\r\n                pom.classList.add('pom', 'current')\r\n            }\r\n\r\n            pom.innerText = this.state.poms[i]\r\n\r\n            poms.appendChild(pom)\r\n        }\r\n    }\r\n\r\n    handleLongDurationChange(event) {\r\n        this.setState({longDuration: event.target.value})\r\n    }\r\n\r\n    handleShortDurationChange(event) {\r\n        this.setState({shortDuration: event.target.value})\r\n    }\r\n\r\n    handleAddLongPom() {\r\n        let poms = this.state.poms\r\n        poms.push(this.state.longDuration)\r\n        this.setState({poms: poms})\r\n        \r\n        this.updatePoms()\r\n    }\r\n    \r\n    handleAddShortPom() {\r\n        let poms = this.state.poms\r\n        poms.push(this.state.shortDuration)\r\n        this.setState({poms: poms})\r\n        \r\n        this.updatePoms()\r\n    }\r\n\r\n    updatePoms() {\r\n        this.props.updatePoms(this.state.poms)\r\n        \r\n        this.displayPoms()\r\n    }\r\n\r\n    handleStart() {\r\n        let currentPom = this.props.currentPom\r\n        let currentPomSpan = document.getElementsByClassName('pom')[currentPom]\r\n\r\n        currentPomSpan.classList.remove('new')\r\n        currentPomSpan.classList.add('in-progress')\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.displayPoms()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div id=\"schedule-container\">\r\n                    <div className=\"input\">\r\n                        <span className=\"label\">Long</span>\r\n                        <input type=\"text\" name=\"long\" value={this.state.longDuration} onChange={this.handleLongDurationChange}/>\r\n                        <button onClick={this.handleAddLongPom}>+</button>\r\n\r\n                        <span className=\"label\">Short</span>\r\n                        <input type=\"text\" name=\"short\" value={this.state.shortDuration} onChange={this.handleShortDurationChange}/>\r\n                        <button onClick={this.handleAddShortPom}>+</button>\r\n                    </div>\r\n                    <div className=\"display\">\r\n                        <span id=\"poms\"></span>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Schedule","import React, { Component } from 'react'\r\nimport Clock from './Clock'\r\nimport Schedule from './Schedule'\r\nimport ReactGA from 'react-ga'\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    ReactGA.initialize('UA-168751680-1')\r\n    ReactGA.pageview(window.location.pathname + window.location.search)\r\n\r\n    this.state = {\r\n      poms: [],\r\n      currentPom: -1,\r\n      running: false,\r\n      scheduleKey: 0,\r\n      clockKey: 0\r\n    }\r\n\r\n    this.updatePoms = this.updatePoms.bind(this)\r\n    this.timerStartedCallback = this.timerStartedCallback.bind(this)\r\n    this.timerPausedCallback = this.timerPausedCallback.bind(this)\r\n    this.timerCompletedCallback = this.timerCompletedCallback.bind(this)\r\n  }\r\n\r\n  updatePoms(poms) {\r\n    this.setState({poms: poms})\r\n  }\r\n\r\n  timerStartedCallback() {\r\n    if (this.state.currentPom < 0) {\r\n      this.setState({running: !this.state.running})\r\n      this.setState({currentPom: this.state.currentPom + 1})\r\n      this.setState({scheduleKey: this.state.scheduleKey + 1})\r\n      this.setState({clockKey: this.state.clockKey + 1})\r\n    }\r\n  }\r\n\r\n  timerPausedCallback(timeRemaining) {\r\n    console.log(timeRemaining) \r\n  }\r\n\r\n  timerCompletedCallback() {\r\n    this.setState({currentPom: this.state.currentPom + 1})\r\n    this.setState({scheduleKey: this.state.scheduleKey + 1})\r\n    this.setState({clockKey: this.state.clockKey + 1})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"container\">\r\n        <div id=\"schedule\">\r\n          <Schedule \r\n            key={this.state.scheduleKey} \r\n            poms={this.state.poms} \r\n            currentPom={this.state.currentPom} \r\n            updatePoms={this.updatePoms}\r\n          />\r\n        </div>\r\n        <div id=\"clock\">\r\n          <Clock \r\n            key={this.state.clockKey}\r\n            poms={this.state.poms}\r\n            currentPom={this.state.currentPom}\r\n            running={this.state.running}\r\n            startedCallback={this.timerStartedCallback}\r\n            pausedCallback={this.timerPausedCallback}\r\n            completedCallback={this.timerCompletedCallback}\r\n          />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}